package main

import (
	"flag"
	"fmt"
	"os"
	"strings"

	"github.com/clly/proto-telemetry/cmd/pkg/fields"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

type config struct {
	includeMap bool
}

func main() {
	var flags flag.FlagSet
	includeMap := flags.Bool("include-map", false, "include map key/values in trace span")
	opts := &protogen.Options{
		ParamFunc: flags.Set,
	}
	cfg := config{includeMap: *includeMap}

	opts.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if !f.Generate {
				continue
			}
			generateFile(p, f, cfg)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, f *protogen.File, cfg config) {
	filename := f.GeneratedFilenamePrefix + "_otel.pb.go"

	g := gen.NewGeneratedFile(filename, f.GoImportPath)
	g.P("// Code generated by protoco-telemetry-go. DO NOT EDIT.")
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()

	attributeIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "attribute",
		GoImportPath: "go.opentelemetry.io/otel/attribute",
	})

	traceIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "trace",
		GoImportPath: "go.opentelemetry.io/otel/trace",
	})

	ctxIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoImportPath: "context",
	})

	_ = g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "fmt"})
	_ = attributeIdent
	_ = traceIdent
	_ = ctxIdent

	msgs := collectMessages(f.Messages)

	for _, msg := range msgs {
		if msg.GoIdent.GoImportPath != f.GoImportPath {
			debug(msg.GoIdent.String(), "is unsupported. GoImportPath does not match")
			continue
		}
		if msg.Desc.IsMapEntry() {
			continue
		}
		debug("generating fields for messages", msg.GoIdent.String())
		g.P("func (x *", msg.GoIdent, ") TraceAttributes(ctx context.Context) {")
		g.P("span := trace.SpanFromContext(ctx)")
		g.P("span.SetAttributes(")
		for _, field := range msg.Fields {
			f := newField(field)
			f.Generate(g)
		}
		g.P(")")
		// map bits
		for _, field := range msg.Fields {
			if field.Desc.IsMap() {
				fields.NewMapGenerator(field).Generate(g)
			}
		}
		g.P("}")
		g.P()
	}
}

func collectMessages(msgs []*protogen.Message) MessageSet {
	set := make(MessageSet)
	for _, m := range msgs {
		debug("adding message", m.GoIdent.GoName, "to set")
		set.Add(m.GoIdent.String(), m)
		messageField := collectMessages(messagesFromFields(m.Fields))
		for _, localMsg := range messageField {
			debug("adding message", m.GoIdent.GoName, "to set")
			set.Add(localMsg.GoIdent.String(), localMsg)
		}
		for _, localMsg := range m.Messages {
			debug("adding message", m.GoIdent.GoName, "to set")
			set.Add(localMsg.GoIdent.String(), localMsg)
		}
	}
	return set
}

func messagesFromFields(f []*protogen.Field) []*protogen.Message {
	msgs := make([]*protogen.Message, 0)
	for _, field := range f {
		if field.Desc.Kind() != protoreflect.MessageKind {
			continue
		}
		if field.Desc.IsMap() {
			debug(field.GoName, "is map")
			fmt.Fprintf(os.Stderr, "%#v\n", field.Desc.MapKey().Kind().String())
			continue
		}
		msgs = append(msgs, field.Message)
	}
	return msgs
}

type FieldAttribute struct {
	field    *protogen.Field
	goName   string
	attrName string
	attrKind string
	castCall string
}

func newField(field *protogen.Field) FieldAttribute {

	attrName := strings.ReplaceAll(field.GoIdent.GoName, "_", ".")
	attrName = strings.ToLower(attrName)
	attrKind, castCall := attributeFromKind(field.Desc.Kind())

	return FieldAttribute{
		attrName: attrName,
		attrKind: attrKind,
		castCall: castCall,
		goName:   field.GoName,
		field:    field,
	}
}

func (f *FieldAttribute) Generate(g *protogen.GeneratedFile) {
	if f.attrKind == "" {
		// fmt.Fprintln(os.Stderr, "Kind", f.field.Desc.Kind().GoString(), "of type", f.field.GoIdent.GoName, "in", f.field.Parent.GoIdent.GoName, "is unsupported")
		return
	}

	var s string
	if f.castCall == "" {
		s = fmt.Sprintf(`attribute.%s("%s", x.%s),`, f.attrKind, f.attrName, f.goName)
	} else {

		s = fmt.Sprintf(`attribute.%s("%s", %s(x.%s)),`, f.attrKind, f.attrName, f.castCall, f.goName)
	}

	g.P(s)
}

func attributeFromKind(k protoreflect.Kind) (string, string) {

	switch k {
	case protoreflect.BoolKind:
		return "Bool", ""
	case protoreflect.Int32Kind, protoreflect.Int64Kind,
		protoreflect.DoubleKind, protoreflect.FloatKind,
		protoreflect.Fixed32Kind, protoreflect.Fixed64Kind,
		protoreflect.Sfixed32Kind, protoreflect.Sfixed64Kind,
		protoreflect.Uint32Kind, protoreflect.Uint64Kind:
		return "Int64", "int64"
	case protoreflect.StringKind:
		return "String", ""
	default:
		return "", ""
	}
}

type MessageSet map[string]*protogen.Message

func (m MessageSet) Add(k string, v *protogen.Message) {
	if _, ok := m[k]; !ok {
		m[k] = v
	}
}

func (m MessageSet) Keys() []string {
	keys := make([]string, len(m))
	i := 0
	for k := range m {
		keys[i] = k
		i++
	}
	return keys
}

func debug(s ...string) {
	fmt.Fprintln(os.Stderr, s)
}
