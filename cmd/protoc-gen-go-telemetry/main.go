package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if !f.Generate {
				continue
			}
			generateFile(p, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, f *protogen.File) {
	filename := f.GeneratedFilenamePrefix + "_otel.pb.go"

	g := gen.NewGeneratedFile(filename, f.GoImportPath)
	g.P("// Code generated by protoco-telemetry-go. DO NOT EDIT.")
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()

	attributeIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "attribute",
		GoImportPath: "go.opentelemetry.io/otel/attribute",
	})

	traceIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "trace",
		GoImportPath: "go.opentelemetry.io/otel/trace",
	})

	ctxIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoImportPath: "context",
	})

	_ = attributeIdent
	_ = traceIdent
	_ = ctxIdent
	for _, msg := range f.Messages {
		g.P("func (x *", msg.GoIdent, ") TraceAttributes(ctx context.Context) {")
		g.P("span := trace.SpanFromContext(ctx)")
		g.P("span.SetAttributes(")
		for _, field := range msg.Fields {
			f := newField(field)
			f.Generate(g)
		}
		g.P(")")
		g.P("}")
		g.P()
	}
}

type FieldAttribute struct {
	kind     protoreflect.Kind
	goName   string
	attrName string
	attrKind string
}

func newField(field *protogen.Field) FieldAttribute {
	attrName := strings.ReplaceAll(field.GoIdent.GoName, "_", ".")
	attrName = strings.ToLower(attrName)
	attrKind, _ := attributeFromKind(field.Desc.Kind())
	return FieldAttribute{
		kind:     field.Desc.Kind(),
		attrName: attrName,
		attrKind: attrKind,
		goName:   field.GoName,
	}
}

func (f *FieldAttribute) Generate(g *protogen.GeneratedFile) {
	if f.attrKind == "" {
		return
	}
	s := fmt.Sprintf(`attribute.%s("%s", x.%s),`, f.attrKind, f.attrName, f.goName)
	g.P(s)
}

func attributeFromKind(k protoreflect.Kind) (string, string) {

	switch k {
	case protoreflect.BoolKind:
		return "Bool", ""
	case protoreflect.Int32Kind, protoreflect.Int64Kind,
		protoreflect.DoubleKind, protoreflect.FloatKind,
		protoreflect.Fixed32Kind, protoreflect.Fixed64Kind,
		protoreflect.Sfixed32Kind, protoreflect.Sfixed64Kind,
		protoreflect.Uint32Kind, protoreflect.Uint64Kind:
		return "Int64", "int64"
	case protoreflect.StringKind:
		return "String", ""
	default:
		return "", ""
	}
}
