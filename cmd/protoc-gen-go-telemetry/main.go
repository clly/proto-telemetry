package main

import (
	"bytes"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(p *protogen.Plugin) error {
		for _, f := range p.Files {
			if !f.Generate {
				continue
			}
			generateFile(p, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, f *protogen.File) {
	filename := f.GeneratedFilenamePrefix + "_otel.pb.go"

	g := gen.NewGeneratedFile(filename, f.GoImportPath)
	g.P("// Code generated by protoco-telemetry-go. DO NOT EDIT.")
	g.P()
	g.P("package ", f.GoPackageName)
	g.P()

	attributeIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "attribute",
		GoImportPath: "go.opentelemetry.io/otel/attribute",
	})

	traceIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoName:       "trace",
		GoImportPath: "go.opentelemetry.io/otel/trace",
	})

	ctxIdent := g.QualifiedGoIdent(protogen.GoIdent{
		GoImportPath: "context",
	})

	_ = attributeIdent
	_ = traceIdent
	_ = ctxIdent
	for _, msg := range f.Messages {
		g.P("func (x *", msg.GoIdent, ") TraceAttributes(ctx context.Context) {")
		g.P("span := trace.SpanFromContext(ctx)")
		g.P("span.SetAttributes(")
		for _, field := range msg.Fields {
			attributeType, cast := attributeFromKind(field.Desc.Kind())
			if attributeType == "" {
				continue
			}
			b := bytes.NewBuffer(make([]byte, 0, 1024))
			b.WriteString(fmt.Sprint("attribute.", attributeType, "(`", field.GoIdent.GoName, "`, "))
			if cast == "" {

				b.WriteString(fmt.Sprint("x.", field.GoName, "),"))
			} else {
				b.WriteString(fmt.Sprint(cast, "(x.", field.GoName, ")),"))
			}
			g.P(b.String())
		}
		g.P(")")
		g.P("}")
		g.P()
	}
}

func attributeFromKind(k protoreflect.Kind) (string, string) {
	switch k {
	case protoreflect.BoolKind:
		return "Bool", ""
	case protoreflect.Int32Kind, protoreflect.Int64Kind,
		protoreflect.DoubleKind, protoreflect.FloatKind,
		protoreflect.Fixed32Kind, protoreflect.Fixed64Kind,
		protoreflect.Sfixed32Kind, protoreflect.Sfixed64Kind,
		protoreflect.Uint32Kind, protoreflect.Uint64Kind:
		return "Int64", "int64"
	case protoreflect.StringKind:
		return "String", "string"
	default:
		return "", ""
	}
}
