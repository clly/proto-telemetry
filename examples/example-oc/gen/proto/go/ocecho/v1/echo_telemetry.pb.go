// Code generated by protoc-gen-go-telemetry version:(devel). DO NOT EDIT.

package ocechov1

import (
	context "context"
	fmt "fmt"
	trace "go.opencensus.io/trace"
)

func (x *EchoRequest) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute("echorequest.msg", x.Msg),
		trace.Int64Attribute("echorequest.number", int64(x.Num32)),
		trace.Int64Attribute("echorequest.unum32", int64(x.Unum32)),
		trace.Int64Attribute("echorequest.num64", int64(x.Num64)),
	)
	for m, v := range x.GetMeta() {
		span.AddAttributes(
			trace.StringAttribute(fmt.Sprintf("echorequest.meta_%s", m), v),
		)
	}
}

func (x *EchoRequest) TraceNamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute(pfx+".echorequest.msg", x.Msg),
		trace.Int64Attribute(pfx+".echorequest.number", int64(x.Num32)),
		trace.Int64Attribute(pfx+".echorequest.unum32", int64(x.Unum32)),
		trace.Int64Attribute(pfx+".echorequest.num64", int64(x.Num64)),
	)
	for m, v := range x.GetMeta() {
		span.AddAttributes(
			trace.StringAttribute(fmt.Sprintf("pfx.echorequest.meta_%s", m), v),
		)
	}
}

func (x *EchoRequest_Envelope) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute("echorequest.envelope.name", x.Name),
	)
}

func (x *EchoRequest_Envelope) TraceNamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute(pfx+".echorequest.envelope.name", x.Name),
	)
}

func (x *MessageDetails) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute("messagedetails.details", x.Details),
	)
}

func (x *MessageDetails) TraceNamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute(pfx+".messagedetails.details", x.Details),
	)
}

func (x *EchoResponse) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute("echoresponse.msg", x.Msg),
	)
}

func (x *EchoResponse) TraceNamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	if !span.IsRecordingEvents() {
		return
	}

	span.AddAttributes(
		trace.StringAttribute(pfx+".echoresponse.msg", x.Msg),
	)
}
