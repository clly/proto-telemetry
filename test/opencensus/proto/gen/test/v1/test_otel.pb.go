// Code generated by protoco-telemetry-go. DO NOT EDIT.

package testv1

import (
	context "context"
	fmt "fmt"
	trace "go.opencensus.io/trace"
)

func (x *StringMessage) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("stringmessage.msg", x.Msg),
	)
}

func (x *StringMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".stringmessage.msg", x.Msg),
	)
}

func (x *Int32Message) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute("int32message.num32", int64(x.Num32)),
	)
}

func (x *Int32Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute(pfx+".int32message.num32", int64(x.Num32)),
	)
}

func (x *Uint32Message) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute("uint32message.unum32", int64(x.Unum32)),
	)
}

func (x *Uint32Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute(pfx+".uint32message.unum32", int64(x.Unum32)),
	)
}

func (x *Int64Message) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute("int64message.num64", int64(x.Num64)),
	)
}

func (x *Int64Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.Int64Attribute(pfx+".int64message.num64", int64(x.Num64)),
	)
}

func (x *SubMessage) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes()
}

func (x *SubMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes()
}

func (x *SubMessage_Envelope) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("submessage.envelope.name", x.Name),
	)
}

func (x *SubMessage_Envelope) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".submessage.envelope.name", x.Name),
	)
}

func (x *MapMessage) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes()
	for m, v := range x.GetMeta() {
		span.AddAttributes(
			trace.StringAttribute(fmt.Sprintf("mapmessage.meta_%s", m), v),
		)
	}
}

func (x *MapMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes()
	for m, v := range x.GetMeta() {
		span.AddAttributes(
			trace.StringAttribute(fmt.Sprintf("pfx.mapmessage.meta_%s", m), v),
		)
	}
}

func (x *MessageDetails) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("messagedetails.details", x.Details),
	)
}

func (x *MessageDetails) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".messagedetails.details", x.Details),
	)
}

func (x *ExcludeField) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("excludefield.nonmasked", x.NonMasked),
	)
}

func (x *ExcludeField) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".excludefield.nonmasked", x.NonMasked),
	)
}

func (x *ExcludeMessage) TraceAttributes(ctx context.Context) {
}

func (x *ExcludeMessage) NamedAttributes(ctx context.Context, pfx string) {
}

func (x *RenameMessagePrefix) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("pfx.msg", x.Msg),
	)
}

func (x *RenameMessagePrefix) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".pfx.msg", x.Msg),
	)
}

func (x *NameField) TraceAttributes(ctx context.Context) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute("namefield.message", x.Msg),
	)
}

func (x *NameField) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.FromContext(ctx)
	span.AddAttributes(
		trace.StringAttribute(pfx+".namefield.message", x.Msg),
	)
}
