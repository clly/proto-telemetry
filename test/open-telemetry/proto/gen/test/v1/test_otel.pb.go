// Code generated by protoco-telemetry-go. DO NOT EDIT.

package testv1

import (
	context "context"
	fmt "fmt"
	attribute "go.opentelemetry.io/otel/attribute"
	trace "go.opentelemetry.io/otel/trace"
)

func (x *StringMessage) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("stringmessage.msg", x.Msg),
	)
}

func (x *StringMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".stringmessage.msg", x.Msg),
	)
}

func (x *Int32Message) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64("int32message.num32", int64(x.Num32)),
	)
}

func (x *Int32Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64(pfx+".int32message.num32", int64(x.Num32)),
	)
}

func (x *Uint32Message) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64("uint32message.unum32", int64(x.Unum32)),
	)
}

func (x *Uint32Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64(pfx+".uint32message.unum32", int64(x.Unum32)),
	)
}

func (x *Int64Message) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64("int64message.num64", int64(x.Num64)),
	)
}

func (x *Int64Message) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.Int64(pfx+".int64message.num64", int64(x.Num64)),
	)
}

func (x *SubMessage) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes()
}

func (x *SubMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes()
}

func (x *SubMessage_Envelope) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("submessage.envelope.name", x.Name),
	)
}

func (x *SubMessage_Envelope) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".submessage.envelope.name", x.Name),
	)
}

func (x *MapMessage) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes()
	for m, v := range x.GetMeta() {
		span.SetAttributes(
			attribute.String(fmt.Sprintf("mapmessage.meta_%s", m), v),
		)
	}
}

func (x *MapMessage) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes()
	for m, v := range x.GetMeta() {
		span.SetAttributes(
			attribute.String(fmt.Sprintf("pfx.mapmessage.meta_%s", m), v),
		)
	}
}

func (x *MessageDetails) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("messagedetails.details", x.Details),
	)
}

func (x *MessageDetails) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".messagedetails.details", x.Details),
	)
}

func (x *ExcludeField) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("excludefield.non_masked", x.NonMasked),
	)
}

func (x *ExcludeField) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".excludefield.non_masked", x.NonMasked),
	)
}

func (x *ExcludeMessage) TraceAttributes(ctx context.Context) {
}

func (x *ExcludeMessage) NamedAttributes(ctx context.Context, pfx string) {
}

func (x *RenameMessagePrefix) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("pfx.msg", x.Msg),
	)
}

func (x *RenameMessagePrefix) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".pfx.msg", x.Msg),
	)
}

func (x *NameField) TraceAttributes(ctx context.Context) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String("namefield.message", x.Msg),
	)
}

func (x *NameField) NamedAttributes(ctx context.Context, pfx string) {
	span := trace.SpanFromContext(ctx)
	span.SetAttributes(
		attribute.String(pfx+".namefield.message", x.Msg),
	)
}
